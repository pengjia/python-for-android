/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package org.renpy.android;

import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGL11;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;
import javax.microedition.khronos.opengles.GL10;
import android.opengl.GLES20;
import android.opengl.Matrix;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.opengl.GLSurfaceView;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.net.Uri;
import android.os.Binder;
import android.os.Environment;
import android.os.IBinder;
import android.os.PowerManager;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLUtils;
import java.nio.FloatBuffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import android.graphics.Color;
import android.content.res.Resources;


public class SDLSurfaceView extends Service {
    private static String TAG = "SDLSurface";

    public class SDLSurfaceBinder extends Binder {
        SDLSurfaceView getService() {
            return SDLSurfaceView.this;
        }
    }

    private final IBinder mBinder = new SDLSurfaceBinder();

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        mResourceManager = new ResourceManager(this);
        mFilesDirectory = getFilesDir().getAbsolutePath();
        mArgument = new File(Environment.getExternalStorageDirectory(), getPackageName()).getAbsolutePath();

        if (!mLaunchedThread) {
            mLaunchedThread = true;
            new Thread(new Runnable() {
                public void run() {
                    nativeInitJavaCallbacks();
                    nativeSetEnv("ANDROID_PRIVATE", mFilesDirectory);
                    nativeSetEnv("ANDROID_ARGUMENT", mArgument);
                    nativeSetEnv("PYTHONOPTIMIZE", "2");
                    nativeSetEnv("PYTHONHOME", mFilesDirectory);
                    nativeSetEnv("PYTHONPATH", mArgument + ":" + mFilesDirectory + "/lib");

                    nativeInit();

                    //Log.i(TAG, "End of native init, stop everything (exit0)");
                    //System.exit(0);
                }
            }).start();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        mLaunchedThread = false;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return START_STICKY;
    }

    // Did we launch our thread?
    private boolean mLaunchedThread = false;

    // The name of the directory where the context stores its files.
    String mFilesDirectory = null;

    // The value of the argument passed in.
    String mArgument = null;

    // The resource manager we use.
    ResourceManager mResourceManager;


    public int checkPause() {
        return 0;
    }

    public int swapBuffers() {
        return 0;
    }

    public void waitForResume() {
    }

    // Native part

    public static native void nativeSetEnv(String name, String value);
    public static native void nativeInit();

    public static native void nativeMouse( int x, int y, int action, int pointerId, int pressure, int radius );
    public static native boolean nativeKey(int keyCode, int down, int unicode);
    public static native void nativeSetMouseUsed();
    public static native void nativeSetMultitouchUsed();

    public native void nativeResize(int width, int height);
    public native void nativeInitJavaCallbacks();

}
